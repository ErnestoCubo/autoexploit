New-Module -Name AutoScript -ScriptBlock {

    function systemRecon{
        #Función que trata de reconocer la máquina para que el usuario pueda saber en que entorno se encuentra
        try{

            $networkInfo = Get-WmiObject Win32_NetworkAdapterConfiguration | Where-Object {$_.IPAddress} | Select-Object IPAddress, MacAddress, Description, DNSServerSearchOrder, DHCPServer, DefaultIPGateway
            $sysInfo = Get-WmiObject -class Win32_ComputerSystem

            $ip = $networkInfo | Select-Object -Expand IPAddress -First 1 | Where-Object { $_ -like '*.*.*.*' } | Out-String -stream
            $mac = $networkInfo | Select-Object -Expand MacAddress -First 1 | Out-String -stream
            $netAdapter =  $networkInfo | Select-Object -Expand Description -First 1 | Out-String -stream
            $osVersion = (Get-WmiObject -class Win32_OperatingSystem).Caption          
            $userDomain = $env:USERDOMAIN
            $networkDomain = $sysInfo.Domain

            
            
            
            
            Write-Host "`n[*]System and network info:" -ForegroundColor Yellow
            Write-Host "`nIP: $ip`nMAC address: $mac`nNetwork Adapter: $netAdapter`nOS version: $osVersion`nSystem Name: $userDomain`nNetwork domain: $networkDomain" -ForegroundColor Green

            Start-Sleep 5
        }
        catch{
            Write-Error "No funciono"
        }

    }

    function findRecursive {
        function searchFile {
            param (
                [Parameter(Mandatory)][string]$file
            )

            try{
                $file = -join("C:\", $file)
                Get-ChildItem -Path $file -ErrorAction stop | Out-Null
                Write-Host (-join($file, " was found")) -ForegroundColor Green
            }
            catch{
                Write-Host (-join($file, " file not found")) -ForegroundColor Red
            }

        }

        $files = @(
            "Windows\repair\sam",
            "Windows\System32\config\RegBack\SAM",
            "Windows\repair\system",
            "Windows\repair\software",
            "Windows\repair\security",
            "Windows\debug\NetSetup.log",
            "Windows\iis5.log",
            "Windows\iis6.log",
            "Windows\iis7.log",
            "Windows\system32\logfiles\httperr\httperr1.log",
            "Windows\Panther\Unattended.xml",
            "Windows\system32\config\AppEvent.Evt",
            "Windows\system32\config\SecEvent.Evt",
            "Windows\system32\config\default.sav",
            "Windows\system32\config\security.sav",
            "Windows\system32\config\software.sav",
            "Windows\system32\config\system.sav",
            "Windows\system32\inetsrv\config\applicationHost.config",
            "Windows\system32\win.ini",
            "Windows\System32\drivers\etc\hosts"

        )
        Write-Host " `n[*]Searching for sensitive files . . . `n" -ForeGroundColor Yellow        
        foreach ($file in $files){
            searchFile -file $file
        }

    }

    function envCreds {
        Write-Host "`n[*]Searching for creds on env variables . . ." -ForegroundColor Yellow
        Get-ChildItem Env: | Format-Table Key,Value  
    }
    
}

Export-ModuleMember -Function findRecursive
Export-ModuleMember -Function envCreds
