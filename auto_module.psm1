New-Module -Name AutoScript -ScriptBlock {

    function systemRecon{
        #Función que trata de reconocer la máquina para que el usuario pueda saber en que entorno se encuentra
        try{

            $networkInfo = Get-WmiObject Win32_NetworkAdapterConfiguration | Where-Object {$_.IPAddress} | Select-Object IPAddress, MacAddress, Description, DNSServerSearchOrder, DHCPServer, DefaultIPGateway, DNSDomain

            $ip = $networkInfo | Select-Object -Expand IPAddress -First 3 | Where-Object { $_ -like '*.*.*.*' } | ForEach-Object ( $_.IPAddress) {
                ForEach-Object{ [IPAddress]$_ } | Where-Object {$_.AddressFamily -eq 'Internetwork' } | ForEach-Object {$_.IPAddressToString}} | Out-String
            $mac = $networkInfo | Select-Object -Expand MacAddress -First 3 | Out-String
            $netAdapter =  $networkInfo | Select-Object -Expand Description -First 3 | Out-String
            $dnsDomain = $networkInfo | Select-Object -Expand DNSDomain -First 2 | Out-String
            $osVersion = (Get-WmiObject -class Win32_OperatingSystem).Caption          
            $userDomain = $env:USERDOMAIN
            $connections = net use
            $netInfo = -join("`nIP:", $ip, "`nNet adapter: ", $netAdapter, "`nDNS domain:", $dnsDomain, "`nUser domain: ", $userDomain)
            $sysInfo = -join("`nOS version:", $osVersion, "`nMAC address:", $mac)

            Write-Host "`n[*]Network info:" -ForegroundColor Yellow
            Write-Host $netInfo -ForegroundColor Green
            Write-Host $sysInfo -ForegroundColor Green
            Write-Host $connections -ForegroundColor Green
            Write-Host  (Get-DnsClientServerAddress -AddressFamily IPv4 | ft | Out-String) -ForegroundColor Green

            Start-Sleep 5
        }
        catch{
            Write-Error "Recon didn´t work"
        }

    }

    function netRecon {
        Write-Host "`n[*]Searching for nearly devices ARP scan incoming . . .`n" -ForegroundColor Yellow
        
        try{
            
            $nearlyDevices = Get-NetNeighbor -AddressFamily IPv4 | ft ifIndex,IPAddress,LinkLayerAddress,State | Out-String | Select-String "Unreachable" -NotMatch
            if ($nearlyDEvices) {
                Write-Host $nearlyDevices -ForegroundColor Green
            }
            else{
                Write-Host "No hosts up" -ForegroundColor Red
            }

            Start-Sleep 5

            Write-Host "`n[*]Searching for listening ports . . ." -ForegroundColor Yellow
            $Connections = netstat -ano
            $listeningConnections = $Connections | findstr.exe "LISTENING" | Out-String
            $establishedConnections = $Connections | findstr.exe "ESTABLISHED" | Out-String
            if ($listeningConnections) {
                Write-Host $listeningConnections -ForegroundColor Green
            }
            else{
                Write-Host "No listening ports available" -ForegroundColor Red
            }
            
            Write-Host "`n[*]Searching for established connections . . ." -ForegroundColor Yellow
            if ($establishedConnections) {
                Write-Host $establishedConnections -ForegroundColor Green
            }
            else{
                Write-Host "No established ports available" -ForegroundColor Red
            }

            Start-Sleep 5
            
            }
        catch{
            Write-Error "Bad net status"

        }

    }

    function findRecursive {
        function searchFile {
            param (
                [Parameter(Mandatory)][string]$file
            )

            try{
                $file = -join("C:\", $file)
                Get-ChildItem -Path $file -ErrorAction Stop | Out-Null
                Write-Host (-join $file, " found") -ForegroundColor Green
            }
            catch{
                Write-Host (-join($file, " file not found")) -ForegroundColor Red
            }

        }

        $files = @(
            "Windows\repair\sam",
            "Windows\System32\config\RegBack\SAM",
            "Windows\repair\system",
            "Windows\repair\software",
            "Windows\repair\security",
            "Windows\debug\NetSetup.log",
            "Windows\iis5.log",
            "Windows\iis6.log",
            "Windows\iis7.log",
            "Windows\system32\logfiles\httperr\httperr1.log",
            "Windows\Panther\Unattended.xml",
            "Windows\system32\config\AppEvent.Evt",
            "Windows\system32\config\SecEvent.Evt",
            "Windows\system32\config\default.sav",
            "Windows\system32\config\security.sav",
            "Windows\system32\config\software.sav",
            "Windows\system32\config\system.sav",
            "Windows\system32\inetsrv\config\applicationHost.config",
            "Windows\system32\win.ini",
            "Windows\System32\drivers\etc\hosts"

        )
        Write-Host " `n[*]Searching for sensitive files . . . `n" -ForeGroundColor Yellow        
        foreach ($file in $files){
            searchFile -file $file
        }

        Start-Sleep 5
    }

    function envCreds {
        Write-Host "`n[*]Searching for creds on env variables . . ." -ForegroundColor Yellow
        Write-Host (Get-ChildItem Env: | Format-Table Key,Value | Out-String) -ForegroundColor Green
        Start-Sleep 5
    }
    function findClearTextCreds {
        
    }

    function checkBinaryPerms {
        Write-Host "`n[*]Looking for perms on binary files . . ." -ForegroundColor Yellow
        
    }
    
}

Export-ModuleMember -Function findRecursive
Export-ModuleMember -Function systemRecon
Export-ModuleMember -Function envCreds
Export-ModuleMember -Function checkBinaryPerms
Export-ModuleMember -Function findClearTextCreds
Export-ModuleMember -Function netRecon
